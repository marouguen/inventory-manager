services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
    volumes:
      - db_data:/var/lib/postgresql/data
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - backend

  backend:
    image: ghcr.io/marouguen/inventory-manager/inventory-backend:latest
    environment:
      DATABASE_URL: postgres://inventory_user:inventory_pass@db:5432/inventory_db
      SECRET_KEY: "your_production_secret"
    depends_on:
      - db
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      - backend
      - proxy

  frontend:
    image: ghcr.io/marouguen/inventory-manager/inventory-frontend:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - proxy

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - webroot:/var/www/certbot
    depends_on:
      - frontend
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    networks:
      - proxy

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - webroot:/var/www/certbot
    entrypoint: >
      sh -c "trap exit TERM; while :; do sleep 12h & wait $${!}; certbot renew --webroot -w /var/www/certbot --quiet; done"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    networks:
      - proxy

volumes:
  db_data:
  certbot-etc:
  certbot-var:
  webroot:

networks:
  backend:
  proxy:
